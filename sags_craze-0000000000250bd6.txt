#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional>
using namespace std;
#define int long long
#define double long double
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define mod 998244353
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> new_data_set;
bool isprime(int n)
	{
    	if(n==1) return true;
    	for(int i = 2;i*i<=n;i++){
    		if(n%i==0) return false;
		}
		return true;
	}
int lcm(int a,int b){
	return (a*b)/__gcd(a,b);
}
int gcd(int a, int b) 
{ 
    if (b == 0) 
        return a; 
    return gcd(b, a % b);  
      
} 
unsigned int factorial(unsigned int n) 
{ 
    if (n == 0) 
    return 1; 
    return n * factorial(n - 1); 
} 
//const int inf=1e17+7;
vector<int>graph[200006];
//int ans=0,child=0;
bool visited[200006]={false};
int dfs(int x){
	visited[x]=true;
	int child = 1;
	for(int i=0;i<graph[x].size();i++){
		if(!visited[graph[x][i]]){
			child+=dfs(graph[x][i]);
		}
	}
	return child;
}
int dsu[100005],s[100005];
int root(int x){
	while(dsu[x]!=x){
		x = dsu[x];
	}
	return x;
}
void uni(int x,int y){
	int p = root(x);
	int q = root(y);
	if(p==q){
		return;
	}
	else{
		if(s[p]<s[q]){
			s[q]+=s[p];
			dsu[p] = q;
		}
		else{
			s[p]+=s[q];
			dsu[q] = p;
		}
	}
}
signed main(){
	FAST
	int t;
	cin>>t;
	string s;
	cin>>s;
	while(t--){
		char c;
		string ans="";
		for(int j=0;j<10;j++){
			ans+="0";
		}
		for(int i=1;i<=10;i++){
			cout<<i<<endl;
			cout.flush();
			cin>>c;
			ans[i-1]=c;
		}
		cout<<ans<<endl;
		cout.flush();
		char f;
		cin>>f;
		if(f=='Y')continue;
		else return 0;
	}
	return 0;
}